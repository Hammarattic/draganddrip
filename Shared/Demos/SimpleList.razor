@inject IJSRuntime JS;
<div class="container">
    <h1 class="title is-size-1 has-text-centered">Simple List</h1>
    <Tabs CodeContent="@codeContent">
        <ExampleContent>
            <div class="columns">
                <div class="column is-half">
                    <!-- SortableList component -->
                    <SortableList Id="simpleList" Items="items" OnUpdate="@SortList" Context="item">
                        <SortableItemTemplate>
                            <div class="card has-border-light has-background-blazor has-text-white has-cursor-grab">
                                <p class="is-size-4 p-2 ml-4">@item.Name</p>
                            </div>
                        </SortableItemTemplate>
                    </SortableList>
                </div>
            </div>
        </ExampleContent>
    </Tabs>
</div>

@code {




    [JSInvokable]
    public async void ReturnAirportNameAsyncSimple(string airportname)
    {
        AirportData.evencoolerairportname = airportname;
    }

    [Parameter]
    public List<Item> itemz { get; set; } = new List<Item>();

    protected override async Task OnInitializedAsync()
    {
        await JS.InvokeVoidAsync("logText", "hej");
        var airportName = await JS.InvokeAsync<string>("getAirportName");
        itemz = Enumerable.Range(1, 2)
                          .Select(i => new Item { Id = i, Name = $"{airportName} {i}" })
                          .ToList();

        await JS.InvokeVoidAsync("logItems", itemz);
    }

    // The code for rendering content inside the Tabs component
    private string codeContent = $@"
    <SortableList Id=""sortable"" Items=""items"" OnUpdate=""@SortList"" Context=""item"">
        <SortableItemTemplate>
            <div class=""has-border has-background-white has-cursor-pointer"">
                <p class=""is-size-4 p-2 ml-4"">@item.Name</p>
            </div>
        </SortableItemTemplate>
    </SortableList>

    @code {{
        public class Item
        {{
            public int Id {{ get; set; }}
            public string Name {{ get; set; }}
        }}

        private void SortList((int oldIndex, int newIndex) indices)
        {{
            // deconstruct the tuple
            var (oldIndex, newIndex) = indices;

            var items = this.items;
            var itemToMove = items[oldIndex];
            items.RemoveAt(oldIndex);

            if (newIndex < items.Count)
            {{
                items.Insert(newIndex, itemToMove);
            }}
            else
            {{
                items.Add(itemToMove);
            }}

            StateHasChanged();
        }}
    }}" ;

    // Define the list of items (airports)
    
    public List<Item> items = Enumerable.Range(1, 2).Select(i => new Item { Id = i, Name = $"{AirportData.evencoolerairportname}" }).ToList();

    // SortList method that will be triggered on list item update
    private async void SortList((int oldIndex, int newIndex) indices)
    {
        await JS.InvokeVoidAsync("logText", "hej");

        await JS.InvokeVoidAsync("logItems", itemz);
        // Deconstruct the tuple of indices for old and new positions
        var (oldIndex, newIndex) = indices;

        var items = this.items;
        var itemToMove = items[oldIndex];
        items.RemoveAt(oldIndex);

        // Insert the moved item into the new index
        if (newIndex < items.Count)
        {
            items.Insert(newIndex, itemToMove);
        }
        else
        {
            items.Add(itemToMove);
        }

        // Refresh the component UI after changes
        StateHasChanged();
    }

    private IJSObjectReference? module;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                module = await JS.InvokeAsync<IJSObjectReference>("import", "./JSFolder/airport.js");
                await module.InvokeVoidAsync("addHandlers");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading JavaScript module: {ex.Message}");
            }
        }
        await JS.InvokeVoidAsync("dragAndDrop", ".draggable");

    }

}
